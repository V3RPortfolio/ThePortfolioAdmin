from django.core.management.base import BaseCommand
from vulnerability_analysis.models import (
    MobileDevice,
    DeviceConnection,
    DevicePort,

    IODevice, 
    NetworkConnection, 
    ProcessInfo, 
    ProcessHeartbeat,
    ProcessLog, 
    ActiveUser,
    AppInfo,
)

from vulnerability_analysis.models.metrics import MetricType

from vulnerability_analysis.models.connection import ConnectionStatus
from django.utils.timezone import now
import uuid

class Command(BaseCommand):
    help = 'Populate device info'

    def add_arguments(self, parser):
        parser.add_argument('--device', type=str, help='Device name')
        parser.add_argument('--total', type=int, help='Total devices to populate')


    def _create_sample_device(self, device_name: str|None=None):
        if not device_name:
            device_name = f"Device-{uuid.uuid4()}"

        device = MobileDevice.objects.create(
            name=device_name,
            mac=str(uuid.uuid4()),
            display_name=device_name,
            description=f"Dummy device for testing",

            is_active=True,
            is_archived=False,
            is_deleted=False,
        )

        
        device_connection = DeviceConnection.objects.create(
            device=device,
            ip="127.0.0.1",
            port=8080,
            connection_payload="",
            connection_headers="",
            status=ConnectionStatus.CONNECTED,
        )

        device_port = DevicePort.objects.create(
            device=device,
            port=8080,
            protocol = "TCP",
            description = "Dummy port for testing",
            local_address = "127.0.0.1",
            remote_address = "127.0.0.1",
            state = "open",
            pid = 1,
            app_details = {},
            transport = "tcp",
        )

        return device, device_connection


    def _create_sample_metrics(self, device: MobileDevice, device_connection: DeviceConnection):
        unique_id = uuid.uuid4()
        timestamp = now()

        io_device = IODevice.objects.create(
            device_name = device.name,
            name = "Dummy IODevice",
            device_path = f"/dev/dummy/{unique_id}",
            device_type = "block",
            status = "active",
        )

        process_info_1 = ProcessInfo.objects.create(
            device_name = device.name,
            process_id = "-1",
            process_name = f"dummy-process-1_{device.name}-{unique_id}",
            first_timestamp = timestamp,
        )
        process_info_2 = ProcessInfo.objects.create(
            device_name = device.name,
            process_id = "-2",
            process_name = f"dummy-process-2_{device.name}-{unique_id}",
            first_timestamp = timestamp,
        )

        ProcessHeartbeat.objects.create(
            device_name = process_info_1.device_name,
            process_id = process_info_1.process_id,
            status = "running",

            is_connected_to_network = True,
            is_connected_to_io = False,
            
            local_network_socket = f"{device_connection.ip}:{device_connection.port}",
            remote_network_socket = "127.0.0.1:8080",
            network_protocol = "tcp",
            network_connection_status = "connected",
            program_name = "Dummy Program",
        )

        ProcessHeartbeat.objects.create(
            device_name = process_info_2.device_name,
            process_id = process_info_2.process_id,
            status = "running",

            is_connected_to_network = False,
            is_connected_to_io = True,

            io_path = io_device.device_path,
            io_comand_name = "Dummy Command",
            io_user_name = "Dummy User",
        )

        NetworkConnection.objects.create(
            device_name = device.name,
            protocol = "tcp",
            version = "1.1",
            local_address = f"{device_connection.ip}:{device_connection.port}",
            foreign_address = "127.0.0.1:8080",
            connection_status = "connected",
            program_name = f"Dummy Program {unique_id}",
        )

        ProcessLog.objects.create(
            device_name = device.name,
            process_id = process_info_1.process_id,
            message = f"Dummy Network Log {unique_id}",
            metric_type = MetricType.NETWORK,
            log_timestamp = now(),
        )

        ProcessLog.objects.create(
            device_name = device.name,
            process_id = process_info_2.process_id,
            message = f"Dummy IO Log {unique_id}",
            metric_type = MetricType.IO,
            log_timestamp = now(),
        )

        ActiveUser.objects.create(
            device_name = device.name,
            user_name = f"user-{unique_id}",
            user_id = f"user-{unique_id}",
            user_type = "admin",
            login_type = "password",
            logged_in_at = timestamp,
        )

        AppInfo.objects.create(
            device_name = device.name,
            file_path = f"/data/app/dummy-{unique_id}.apk",
            apk_path = f"/data/app/dummy-{unique_id}.apk",
            apk_version = "1.0",
            package_name = f"com.dummy.app-{unique_id}",
            package_type = "system",
            app_status = "active",
        )

        

    def handle(self, *args, **kwargs):
        device_name = kwargs.get('device')
        total = kwargs.get('total', 1)

        if device_name:
            device, device_connection = self._create_sample_device(device_name)
            self._create_sample_metrics(device, device_connection)

        else:
            for _ in range(total):
                device, device_connection = self._create_sample_device()
                self._create_sample_metrics(device, device_connection)

        
