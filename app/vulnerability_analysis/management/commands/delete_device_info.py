from django.core.management.base import BaseCommand
from vulnerability_analysis.models import (
    IODevice, 
    NetworkConnection, 
    ProcessInfo, 
    ProcessHeartbeat,
    ProcessLog, 
    ActiveUser,
    AppInfo,

    DeviceConnection,
    DevicePort,
    MobileDevice
)

from django.utils.timezone import timedelta

class Command(BaseCommand):
    help = 'Delete device info'

    def add_arguments(self, parser):
        parser.add_argument('--days', type=int, default=30, help='Number of days to delete device info')
        parser.add_argument('--all', action='store_true', help='Delete all device info')
        parser.add_argument('--device', type=str, help='Delete device info by device name')


    def _delete_device_metrics(self, days: int, device_name: str):
        if device_name:
            NetworkConnection.objects.filter(device_name=device_name, created_at__lt=timezone.now() - timedelta(days=days)).delete()

            ProcessInfo.objects.filter(device_name=device_name, created_at__lt=timezone.now() - timedelta(days=days)).delete()
            ProcessHeartbeat.objects.filter(device_name=device_name, created_at__lt=timezone.now() - timedelta(days=days)).delete()
            ProcessLog.objects.filter(device_name=device_name, created_at__lt=timezone.now() - timedelta(days=days)).delete()

            ActiveUser.objects.filter(device_name=device_name, created_at__lt=timezone.now() - timedelta(days=days)).delete()

            AppInfo.objects.filter(device_name=device_name, created_at__lt=timezone.now() - timedelta(days=days)).delete()

            IODevice.objects.filter(device_name=device_name, created_at__lt=timezone.now() - timedelta(days=days)).delete()


    def _delete_device_connection(self, device_name: str):
        if device_name:
            DeviceConnection.objects.filter(device_name=device_name, created_at__lt=timezone.now() - timedelta(days=days)).delete()
            DevicePort.objects.filter(device_name=device_name, created_at__lt=timezone.now() - timedelta(days=days)).delete()



    def handle(self, *args, **kwargs):
        days = kwargs.get('days')
        self.stdout.write(f'Deleting device info older than {days} days')
        self._delete_device_metrics(days, kwargs.get('device'))
        self._delete_device_connection(kwargs.get('device'))
        MobileDevice.objects.filter(name=kwargs.get('device')).delete()

        if kwargs.get('all'):
            self.stdout.write(f'Deleting all device info')
            self._delete_device_metrics(None, None)
            self._delete_device_connection(None)
            MobileDevice.objects.all().delete()

