from ninja import Schema, ModelSchema, Field, FilterSchema
from typing import Optional, List
from datetime import datetime   
import uuid
from vulnerability_analysis.models.metrics import MetricType
from vulnerability_analysis.models import (
    AppInfo,
    NetworkConnection,
    IODevice,
    ProcessInfo,
    ProcessHeartbeat,
    ProcessLog,
    ActiveUser, 
)

class AppInfoFilterSchema(FilterSchema):
    id: Optional[uuid.UUID] = None
    device_name: Optional[str] = None
    package_name: Optional[str] = None
    app_status: Optional[str] = None
    package_type: Optional[str] = None
    apk_version: Optional[str] = None

class AppInfoSchema(ModelSchema):
    class Meta:
        model = AppInfo
        exclude = ['created_at', 'updated_at']

class AppInfoRequest(Schema):
    apps: List[AppInfoSchema] = Field(..., min_items=1)

class AppInfoUpdate(ModelSchema):
    class Meta:
        model = AppInfo
        fields = ['apk_version', 'package_type', 'app_status', 'file_path']

class AppInfoResponse(ModelSchema):
    class Meta:
        model = AppInfo
        exclude = ['created_at']

class NetworkConnectionFilterSchema(FilterSchema):
    id: Optional[uuid.UUID] = None
    device_name: Optional[str] = None
    protocol: Optional[str] = None
    version: Optional[str] = None
    local_address: Optional[str] = None
    foreign_address: Optional[str] = None
    connection_status: Optional[str] = None
    program_name: Optional[str] = None

class NetworkConnectionSchema(ModelSchema):
    class Meta:
        model = NetworkConnection
        exclude = ['created_at', 'updated_at']


class NetworkConnectionRequest(Schema):
    network_connections: List[NetworkConnectionSchema] = Field(..., min_items=1)

class NetworkConnectionUpdate(ModelSchema):
    class Meta:
        model = NetworkConnection
        fields = ['protocol', 'version', 'local_address', 'foreign_address', 'connection_status']

class NetworkConnectionResponse(ModelSchema):
    class Meta:
        model = NetworkConnection
        exclude = ['created_at']


class IODeviceFilterSchema(FilterSchema):
    id: Optional[uuid.UUID] = None
    device_name: Optional[str] = None
    name: Optional[str] = None
    device_type: Optional[str] = None
    status: Optional[str] = None

class IODeviceSchema(ModelSchema):
    class Meta:
        model = IODevice
        exclude = ['created_at', 'updated_at']

class IODeviceRequest(Schema):
    devices: List[IODeviceSchema] = Field(..., min_items=1)

class IODeviceUpdate(ModelSchema):
    class Meta:
        model = IODevice
        fields = ['name', 'device_type', 'status', 'device_path']


class IODeviceResponse(ModelSchema):
    class Meta:
        model = IODevice
        exclude = ['created_at']


class ProcessInfoFilterSchema(FilterSchema):
    id: Optional[uuid.UUID] = None
    device_name: Optional[str] = None
    process_id: Optional[str] = None
    process_name: Optional[str] = None

class ProcessInfoSchema(ModelSchema):
    class Meta:
        model = ProcessInfo
        exclude = ['created_at', 'updated_at']

class ProcessInfoRequest(Schema):
    processes: List[ProcessInfoSchema] = Field(..., min_items=1)

class ProcessInfoUpdate(ModelSchema):
    class Meta:
        model = ProcessInfo
        fields = ['device_name']

class ProcessInfoResponse(ProcessInfoSchema):
    class Meta:
        model = ProcessInfo
        exclude = ['created_at']


class ProcessHeartbeatSchema(ModelSchema):
    class Meta:
        model = ProcessHeartbeat
        exclude = ['created_at']

class ProcessHeartbeatRequest(Schema):
    heartbeats: List[ProcessHeartbeatSchema] = Field(..., min_items=1)


class ProcessHeartbeatResponse(ProcessHeartbeatSchema):
    class Meta:
        model = ProcessHeartbeat
        exclude = ['created_at']


class ProcessLogSchema(ModelSchema):
    class Meta:
        model = ProcessLog
        exclude = ['created_at']

class ProcessLogRequest(Schema):
    logs: List[ProcessLogSchema] = Field(..., min_items=1)

class ProcessLogResponse(ProcessLogSchema):
    class Meta:
        model = ProcessLog
        exclude = ['created_at']

class ActiveUserFilterSchema(FilterSchema):
    id: Optional[uuid.UUID] = None
    device_name: Optional[str] = None
    user_type: Optional[str] = None
    login_type: Optional[str] = None
    
class ActiveUserSchema(ModelSchema):
    class Meta:
        model = ActiveUser
        exclude = ['created_at', 'updated_at']

class ActiveUserRequest(Schema):
    users: List[ActiveUserSchema] = Field(..., min_items=1)

class ActiveUserUpdate(ModelSchema):
    class Meta:
        model = ActiveUser
        fields = ['device_name', 'user_type', 'login_type', 'logged_in_at']

class ActiveUserResponse(ActiveUserSchema):
    class Meta:
        model = ActiveUser
        exclude = ['created_at']