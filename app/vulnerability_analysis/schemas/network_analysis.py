from ninja import Schema
from typing import Optional, Dict
from datetime import datetime
from vulnerability_analysis.models.connection import ConnectionStatus
from asgiref.sync import sync_to_async

class DeviceConnectionSchema(Schema):
    device_id: int
    ip: str
    port: int
    connection_payload: Optional[str] = None
    connection_headers: Optional[str] = None
    status: str = ConnectionStatus.UNKNOWN.value

    # @sync_to_async
    # def validate_port(self, port: int) -> int:
    #     if port < 0 or port > 65535:
    #         raise ValueError("Port number must be between 0 and 65535")
    #     return port

class DeviceConnectionResponse(DeviceConnectionSchema):
    id: int
    created_at: datetime
    updated_at: datetime

class DeviceConnectionListResponse(Schema):
    connections: list[DeviceConnectionResponse]

class DevicePortSchema(Schema):
    device_id: int
    port: int
    protocol: str
    description: Optional[str] = None
    local_address: str
    remote_address: str
    state: str
    pid: int
    app_details: Optional[Dict] = None
    transport: str


    # @sync_to_async
    # def validate_port(self, port: int) -> int:
    #     if port < 0 or port > 65535:
    #         raise ValueError("Port number must be between 0 and 65535")
    #     return port

class DevicePortResponse(DevicePortSchema):
    id: int
    created_at: datetime
    updated_at: datetime 