from ninja import Router
from typing import List
from vulnerability_analysis.schemas import (
    DeviceConnectionSchema,
    DeviceConnectionResponse,
    DeviceConnectionListResponse,
    MessageResponse,
    ErrorResponse
)
from vulnerability_analysis.models import (
    DeviceConnection, 
    MobileDevice
)
from vulnerability_analysis.models.connection import ConnectionStatus
from authentication.models import RoleType
from authentication.decorators import require_device_token, require_roles
from vulnerability_analysis.helpers import is_same_device, openapi_extra


router = Router()

@router.post("/connect", response={200: DeviceConnectionResponse, 400: ErrorResponse}, openapi_extra=openapi_extra)
@require_device_token()
async def connect_device(request, connection: DeviceConnectionSchema):
    try:
        if not is_same_device(request, connection.device_id):
            return 404, ErrorResponse(error="Device not found")
        device = await MobileDevice.objects.aget(id=connection.device_id)
        
        client_ip = request.headers.get("X-Forwarded-For")
        if not client_ip:
            return 400, ErrorResponse(error="Client IP not found")
        

        # Create or update connection
        connection_obj, created = await DeviceConnection.objects.aupdate_or_create(
            device=device,
            ip=client_ip,
            port=connection.port,
            defaults={
                'status': ConnectionStatus.CONNECTED.value,
                'connection_payload': connection.connection_payload,
                'connection_headers': connection.connection_headers
            }
        )
        return 200, connection_obj
    except MobileDevice.DoesNotExist:
        return 400, ErrorResponse(error="Device not found")

@router.post("/disconnect", response={200: MessageResponse, 404: ErrorResponse}, openapi_extra=openapi_extra)
@require_device_token()
async def disconnect_device(request):
    try:
        device_id = request.device_info.get("device_id")
        device = await MobileDevice.objects.aget(id=device_id)
        await DeviceConnection.objects.filter(device=device).aupdate(
            status=ConnectionStatus.DISCONNECTED.value
        )
        return 200, MessageResponse(message="Device disconnected successfully")
    except MobileDevice.DoesNotExist:
        return 404, ErrorResponse(error="Device not found")


@router.get("/all", response={200: DeviceConnectionListResponse, 404: ErrorResponse}, openapi_extra=openapi_extra)
@require_device_token()
@require_roles([RoleType.ADMIN])
def list_connections(request):
    try:
        device_id = request.device_info.get("device_id")
        return 200, DeviceConnectionListResponse(connections=DeviceConnection.objects.filter(device__id=device_id).all())
    except Exception as e:
        return 400, ErrorResponse(error=str(e))




@router.get("/active", response={200: DeviceConnectionListResponse, 404: ErrorResponse}, openapi_extra=openapi_extra)
@require_device_token()
@require_roles([RoleType.ADMIN])
def list_active_connections(request):
    try:
        device_id = request.device_info.get("device_id")
        return DeviceConnectionListResponse(connections=DeviceConnection.objects.filter(device__id=device_id, status=ConnectionStatus.CONNECTED.value).all())
    except Exception as e:
        return 400, ErrorResponse(error=str(e))