from ninja import Router
from typing import List
from vulnerability_analysis.schemas import (
    DeviceConnectionSchema,
    DeviceConnectionResponse,
    DeviceConnectionListResponse,
    MessageResponse,
    ErrorResponse
)
from vulnerability_analysis.models import (
    DeviceConnection, 
    MobileDevice
)
from vulnerability_analysis.models.connection import ConnectionStatus
router = Router()

@router.post("/connect", response={200: DeviceConnectionResponse, 400: ErrorResponse})
async def connect_device(request, connection: DeviceConnectionSchema):
    try:
        device = await MobileDevice.objects.aget(id=connection.device_id)
        
        # Create or update connection
        connection_obj, created = await DeviceConnection.objects.aupdate_or_create(
            device=device,
            ip=connection.ip,
            port=connection.port,
            defaults={
                'status': ConnectionStatus.CONNECTED.value,
                'connection_payload': connection.connection_payload,
                'connection_headers': connection.connection_headers
            }
        )
        return 200, connection_obj
    except MobileDevice.DoesNotExist:
        return 400, ErrorResponse(error="Device not found")

@router.post("/disconnect/{device_id}", response={200: MessageResponse, 404: ErrorResponse})
async def disconnect_device(request, device_id: int):
    try:
        device = await MobileDevice.objects.aget(id=device_id)
        await DeviceConnection.objects.filter(device=device).aupdate(
            status=ConnectionStatus.DISCONNECTED.value
        )
        return 200, MessageResponse(message="Device disconnected successfully")
    except MobileDevice.DoesNotExist:
        return 404, ErrorResponse(error="Device not found")


@router.get("/all", response={200: DeviceConnectionListResponse, 404: ErrorResponse})
def list_connections(request):
    return DeviceConnectionListResponse(connections=DeviceConnection.objects.all())




@router.get("/active", response={200: DeviceConnectionListResponse, 404: ErrorResponse})
def list_active_connections(request):
    return DeviceConnectionListResponse(connections=DeviceConnection.objects.filter(status=ConnectionStatus.CONNECTED.value).all())