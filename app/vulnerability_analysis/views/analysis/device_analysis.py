from ninja import Router
from typing import List, Dict
from vulnerability_analysis.schemas import (
    AppSummarySchema,
    AppSummaryResponse,
    AppVulnerabilityResponse,
    DeviceSecurityResponse,
    DeviceAnalysisSummarySchema,
    DeviceAnalysisSummaryResponse,
    MessageResponse,
    ErrorResponse
)
from vulnerability_analysis.models import (
    AppSummary, 
    AppVulnerability,
    DeviceSecurity,
    MobileDevice
)
from django.db import transaction
from authentication.decorators import require_device_token, require_roles
from authentication.models import RoleType
from vulnerability_analysis.helpers import is_same_device, openapi_extra
import traceback
import logging

logger = logging.getLogger(__name__)

router = Router()


# @router.post("/summary/{device_id}", response={200: MessageResponse, 404: ErrorResponse})
def receive_device_analysis(request, device_id: int, analysis: DeviceAnalysisSummarySchema):
    try:
        if not is_same_device(request, device_id):
            return 404, ErrorResponse(error="Device not found")
        
        device = MobileDevice.objects.get(id=device_id)
        
        with transaction.atomic():
            # Update security information
            security_data = analysis.security.dict()
            security = DeviceSecurity.objects.update_or_create(
                device=device,
                defaults=security_data
            )

            # Update apps
            apps:list[AppSummary] = []
            for app_data in analysis.apps:
                vulns = []
                for vuln_data in app_data.vulnerabilities:
                    vuln_dict = vuln_data.dict()
                    vuln, _ = AppVulnerability.objects.update_or_create(
                        title=vuln_dict['title'],
                        defaults=vuln_dict
                    )
                    vulns.append(vuln)
                app_dict = app_data.dict(exclude={'vulnerabilities'})
                app, _ = AppSummary.objects.update_or_create(
                    device=device,
                    defaults=app_dict
                )
                app.vulnerabilities.set(vulns) 
                
                apps.append(app)
            

        return 200, MessageResponse(message="Analysis data received and processed successfully")
    except MobileDevice.DoesNotExist:
        logger.error(f"Device not found: {device_id}")
        return 404, ErrorResponse(error="Device not found")
    except Exception as e:
        logger.error(f"Error receiving device analysis: {e}", exc_info=True)
        traceback.print_exc()
        return 400, ErrorResponse(error=str(e))

@router.get("/summary/{device_id}", response={200: DeviceAnalysisSummaryResponse, 404: ErrorResponse}, openapi_extra=openapi_extra)
@require_device_token()
@require_roles([RoleType.ADMIN])
def get_device_analysis(request, device_id: int):
    try:
        if not is_same_device(request, device_id):
            return 404, ErrorResponse(error="Device not found")
        
        device = MobileDevice.objects.get(id=device_id)
        
        # Get apps with their vulnerabilities
        apps = AppSummary.objects.filter(device=device).prefetch_related('vulnerabilities').all()
        security = DeviceSecurity.objects.filter(device=device).first()
        
        if not security:
            return 404, ErrorResponse(error="Security information not found")

        return 200, DeviceAnalysisSummaryResponse(
            apps=[AppSummaryResponse.from_orm(app) for app in apps],
            security=DeviceSecurityResponse.from_orm(security)
        )
    except MobileDevice.DoesNotExist:
        return 404, ErrorResponse(error="Device not found")
    except Exception as e:
        return 400, ErrorResponse(error=str(e), stack_trace=traceback.format_exc())

@router.get("/vulnerabilities/{device_id}", response={200: List[AppVulnerabilityResponse], 404: ErrorResponse}, openapi_extra=openapi_extra)  
@require_device_token()
@require_roles([RoleType.ADMIN])
def get_device_vulnerabilities(request, device_id: int):
    try:
        if not is_same_device(request, device_id):
            return 404, ErrorResponse(error="Device not found")
        
        vulnerabilities = AppSummary.objects.filter(device_id=device_id).prefetch_related('vulnerabilities').all()
        result:list[AppVulnerabilityResponse] = []
        for app in vulnerabilities:
            for vuln in app.vulnerabilities.all():
                result.append(AppVulnerabilityResponse.from_orm(vuln))
        return 200, result
    except Exception as e:
        return 400, ErrorResponse(error=str(e))

@router.get("/security/{device_id}", response={200: DeviceSecurityResponse, 404: ErrorResponse}, openapi_extra=openapi_extra)
@require_device_token()
@require_roles([RoleType.ADMIN])
def get_device_security(request, device_id: int):
    try:
        if not is_same_device(request, device_id):
            return 404, ErrorResponse(error="Device not found")
        
        security = DeviceSecurity.objects.filter(device_id=device_id).first()
        if not security:
            return 404, ErrorResponse(error="Security information not found")
        return 200, DeviceSecurityResponse.from_orm(security)
    except Exception as e:
        return 400, ErrorResponse(error=str(e))