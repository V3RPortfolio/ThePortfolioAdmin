from ninja import Router, Query
from ninja.pagination import paginate, PageNumberPagination
from typing import List
from vulnerability_analysis.schemas import (
    MobileDeviceSchema, 
    MobileDeviceResponse,
    MobileDeviceFilterSchema,
    MessageResponse,
    ErrorResponse,
    CreateMobileDeviceResponse
)
from vulnerability_analysis.models import MobileDevice
from authentication.decorators import require_device_token, require_roles
from authentication.models import RoleType
from vulnerability_analysis.helpers import is_same_device, openapi_extra

router = Router()

@router.post("/create", response={201: MobileDeviceResponse, 400: ErrorResponse}, openapi_extra=openapi_extra)
async def create_device(request, payload: MobileDeviceSchema):
    device = await MobileDevice.objects.acreate(**payload.dict())
    return 201, CreateMobileDeviceResponse.from_orm(device)



@router.get("/all", response={200: list[MobileDeviceResponse], 404: ErrorResponse}, openapi_extra=openapi_extra)
@require_device_token()
@require_roles([RoleType.ADMIN])
@paginate(PageNumberPagination)
def list_devices(request, filters: MobileDeviceFilterSchema = Query(...)):
    return filters.filter(MobileDevice.objects.all())

@router.get("/{device_id}", response={200: MobileDeviceResponse, 404: ErrorResponse}, openapi_extra=openapi_extra)
@require_device_token()
async def get_device(request, device_id: int):
    try:
        if not request.device_info:
            return 404, ErrorResponse(error="Device not found")
        
        if not is_same_device(request, device_id):
            return 404, ErrorResponse(error="Device not found")
        
        device = await MobileDevice.objects.aget(id=device_id) 
        return 200, MobileDeviceResponse.from_orm(device)
    except MobileDevice.DoesNotExist:
        return 404, ErrorResponse(error="Device not found")


@router.get("/mac-address/{mac_address}", response={200: MobileDeviceResponse, 404: ErrorResponse}, openapi_extra=openapi_extra)
@require_device_token()
@require_roles([RoleType.ADMIN])
def get_device_by_mac_address(request, mac_address: str):
    try:        
        return MobileDevice.objects.get(mac=mac_address)
    except MobileDevice.DoesNotExist:
        return 404, ErrorResponse(error="Device not found")
