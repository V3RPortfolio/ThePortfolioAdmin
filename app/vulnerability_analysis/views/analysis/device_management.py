from ninja import Router, Query
from ninja.pagination import paginate, PageNumberPagination
from typing import List
from vulnerability_analysis.schemas import (
    MobileDeviceSchema, 
    MobileDeviceResponse,
    MobileDeviceFilterSchema,
    MessageResponse,
    ErrorResponse,
    CreateMobileDeviceResponse
)
from vulnerability_analysis.models import MobileDevice
from authentication.decorators import require_device_token, require_roles
from authentication.models import RoleType
from portfolio_django_admin.constants import OPENAPI_DEVICE_EXTRA
from authentication.schemas import DeviceTokenPayload

router = Router()


@router.post("/create", response={201: CreateMobileDeviceResponse, 400: ErrorResponse, 200: CreateMobileDeviceResponse})
async def create_device(request, payload: MobileDeviceSchema):
    if not request.user:
        return 401, ErrorResponse(error="Unauthorized")
    
    existing_device = await MobileDevice.objects.filter(mac=payload.mac).afirst()
    if existing_device:
        return 200, CreateMobileDeviceResponse.from_orm(existing_device)
    
    device = await MobileDevice.objects.acreate(**payload.dict(), registered_by=request.user.username)
    return 201, CreateMobileDeviceResponse.from_orm(device)



@router.get("/all", response={200: list[MobileDeviceResponse], 404: ErrorResponse}, openapi_extra=OPENAPI_DEVICE_EXTRA)
@require_device_token()
@require_roles([RoleType.ADMIN])
@paginate(PageNumberPagination)
def list_devices(request, filters: MobileDeviceFilterSchema = Query(...)):
    return filters.filter(MobileDevice.objects.all())

@router.get("/", response={200: MobileDeviceResponse, 404: ErrorResponse}, auth=None, openapi_extra=OPENAPI_DEVICE_EXTRA)
@require_device_token()
async def get_device(request):
    device_id = request.device_info.device_id
    if not device_id:
        return 404, ErrorResponse(error="Device not found")

    try:
        device = await MobileDevice.objects.aget(id=device_id) 
        return 200, MobileDeviceResponse.from_orm(device)
    except MobileDevice.DoesNotExist:
        return 404, ErrorResponse(error="Device not found")


@router.get("/mac-address", response={200: MobileDeviceResponse, 404: ErrorResponse}, openapi_extra=OPENAPI_DEVICE_EXTRA)
@require_device_token()
@require_roles([RoleType.ADMIN])
def get_device_by_mac_address(request):
    try:        
        return MobileDevice.objects.get(mac=request.device_info.device_mac, registered_by=request.user.username)
    except MobileDevice.DoesNotExist:
        return 404, ErrorResponse(error="Device not found")


@router.post("/regenerate-token", response={200: MobileDeviceResponse, 404: ErrorResponse}, openapi_extra=OPENAPI_DEVICE_EXTRA)
@require_device_token()
async def regenerate_device_token(request):
    device_id = request.device_info.device_id
    if not device_id:
        return 404, ErrorResponse(error="Device not found")
    
    device = await MobileDevice.objects.aget(id=device_id, registered_by=request.user.username)
    device.token = device.generate_token()
    await device.asave()
    return 200, MobileDeviceResponse.from_orm(device)


@router.get("/my-devices", response={200: list[MobileDeviceResponse], 404: ErrorResponse})
def get_my_devices(request):
    devices = MobileDevice.objects.filter(registered_by=request.user.username).all()
    return 200, [MobileDeviceResponse.from_orm(device) for device in devices]