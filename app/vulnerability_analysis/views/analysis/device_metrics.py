from ninja import Router
from ninja.pagination import paginate, PageNumberPagination
from typing import List
import uuid
from asgiref.sync import sync_to_async
from vulnerability_analysis.schemas.metrics import (
    AppInfoSchema,
    AppInfoRequest,
    AppInfoResponse,
    AppInfoUpdate,
    NetworkConnectionSchema,
    NetworkConnectionRequest,
    NetworkConnectionResponse,
    NetworkConnectionUpdate,
    IODeviceSchema,
    IODeviceRequest,
    IODeviceResponse,
    IODeviceUpdate,
    ProcessInfoSchema,
    ProcessInfoRequest,
    ProcessInfoResponse,
    ProcessInfoUpdate,
    ProcessHeartbeatRequest,
    ProcessLogRequest,
    ProcessLogResponse,
    ActiveUserSchema,
    ActiveUserRequest,
    ActiveUserResponse,
    ActiveUserUpdate,
)
from vulnerability_analysis.models import (
    AppInfo,
    NetworkConnection,
    IODevice,
    ProcessInfo,
    ProcessHeartbeat,
    ProcessLog,
    ActiveUser,
)
from vulnerability_analysis.schemas import (
    MessageResponse,
    ErrorResponse
)
from django.db import transaction
import traceback
import logging

logger = logging.getLogger(__name__)

router = Router()



@router.post("/app-info", response={200: MessageResponse, 400: ErrorResponse})
def create_app_info(request, app_info: AppInfoRequest):
    try:
        result = AppInfo.objects.bulk_create([AppInfo(**app.dict()) for app in app_info.apps])
        return 200, MessageResponse(message=f"App info created successfully for {len(result)} apps")
    except Exception as e:
        logger.error(f"Error creating app info: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))

@router.patch("/app-info", response={200: MessageResponse, 400: ErrorResponse})
def update_app_info(request, id: uuid.UUID, app_info: AppInfoUpdate):
    try:
        existing_app_info = AppInfo.objects.get(id=id)
        for attr, value in app_info.dict(exclude_unset=True).items():
            setattr(existing_app_info, attr, value)
        existing_app_info.save()
        return 200, MessageResponse(message=f"App info updated successfully for {existing_app_info.id} apps")
    except Exception as e:
        logger.error(f"Error updating app info: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))


@router.get("/app-info", response={200: List[AppInfoResponse], 400: ErrorResponse})
@paginate(PageNumberPagination)
def list_app_info(request):
    try:
        apps = AppInfo.objects.all()
        return apps
    except Exception as e:
        logger.error(f"Error listing app info: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))

@router.post("/network-connection", response={200: MessageResponse, 400: ErrorResponse})
def create_network_connection(request, connection: NetworkConnectionRequest):
    try:
        result = NetworkConnection.objects.bulk_create([NetworkConnection(**conn.dict()) for conn in connection.network_connections])
        return 200, MessageResponse(message=f"Network connection created successfully for {len(result)} connections")
    except Exception as e:
        logger.error(f"Error creating network connection: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))

@router.patch("/network-connection", response={200: MessageResponse, 400: ErrorResponse})
def update_network_connection(request, id: uuid.UUID, connection: NetworkConnectionUpdate):
    try:
        existing_connection = NetworkConnection.objects.get(id=id)
        for attr, value in connection.dict(exclude_unset=True).items():
            setattr(existing_connection, attr, value)
        existing_connection.save()
        return 200, MessageResponse(message=f"Network connection updated successfully for {existing_connection.id} connections")
    except Exception as e:
        logger.error(f"Error updating network connection: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))

@router.get("/network-connection", response={200: List[NetworkConnectionResponse], 400: ErrorResponse})
@paginate(PageNumberPagination)
def list_network_connections(request):
    try:
        connections = NetworkConnection.objects.all()
        return connections
    except Exception as e:
        logger.error(f"Error listing network connections: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))


@router.post("/io-device", response={200: MessageResponse, 400: ErrorResponse})
def create_io_device(request, device: IODeviceRequest):
    try:
        result = IODevice.objects.bulk_create([IODevice(**dev.dict()) for dev in device.devices])
        return 200, MessageResponse(message=f"IO device created successfully for {len(result)} devices")
    except Exception as e:
        logger.error(f"Error creating IO device: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))
    
@router.patch("/io-device", response={200: MessageResponse, 400: ErrorResponse})
def update_io_device(request, id: uuid.UUID, device: IODeviceUpdate):
    try:
        existing_device = IODevice.objects.get(id=id)
        for attr, value in device.dict(exclude_unset=True).items():
            setattr(existing_device, attr, value)
        existing_device.save()
        return 200, MessageResponse(message=f"IO device updated successfully for {existing_device.id} devices")
    except Exception as e:
        logger.error(f"Error updating IO device: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))

@paginate
@router.get("/io-device", response={200: List[IODeviceResponse], 400: ErrorResponse})
def list_io_devices(request):
    try:
        devices = IODevice.objects.all()
        return 200, [IODeviceResponse.from_orm(device) for device in devices]
    except Exception as e:
        logger.error(f"Error listing IO devices: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))

@router.post("/process-info", response={200: MessageResponse, 400: ErrorResponse})
def create_process_info(request, process: ProcessInfoRequest):
    try:
        result = ProcessInfo.objects.bulk_create([ProcessInfo(**proc.dict()) for proc in process.processes])
        return 200, MessageResponse(message=f"Process info created successfully for {len(result)} processes")
    except Exception as e:
        logger.error(f"Error creating process info: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))
    
@router.patch("/process-info", response={200: MessageResponse, 400: ErrorResponse})
def update_process_info(request, id: uuid.UUID, process: ProcessInfoUpdate):
    try:
        existing_process = ProcessInfo.objects.get(id=id)
        for attr, value in process.dict(exclude_unset=True).items():
            setattr(existing_process, attr, value)
        existing_process.save()
        return 200, MessageResponse(message=f"Process info updated successfully for {existing_process.id} processes")
    except Exception as e:
        logger.error(f"Error updating process info: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))

@paginate
@router.get("/process-info", response={200: List[ProcessInfoResponse], 400: ErrorResponse})
def list_process_info(request):
    try:
        processes = ProcessInfo.objects.all()
        return 200, [ProcessInfoResponse.from_orm(process) for process in processes]
    except Exception as e:
        logger.error(f"Error listing process info: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))

@router.post("/process-heartbeat", response={200: MessageResponse, 400: ErrorResponse})
def create_process_heartbeat(request, heartbeat: ProcessHeartbeatRequest):
    try:
        result = ProcessHeartbeat.objects.bulk_create([ProcessHeartbeat(**hb.dict()) for hb in heartbeat.heartbeats])
        return 200, MessageResponse(message=f"Process heartbeat created successfully for {len(result)} heartbeats")
    except Exception as e:
        logger.error(f"Error creating process heartbeat: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))



@router.post("/process-log", response={200: MessageResponse, 400: ErrorResponse})
def create_process_log(request, log: ProcessLogRequest):
    try:
        result = ProcessLog.objects.bulk_create([ProcessLog(**log.dict()) for log in log.logs])
        return 200, MessageResponse(message=f"Process log created successfully for {len(result)} logs")
    except Exception as e:
        logger.error(f"Error creating process log: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))

@paginate
@router.get("/active-user", response={200: List[ActiveUserResponse], 400: ErrorResponse})
def list_active_users(request):
    try:
        users = ActiveUser.objects.all()
        return 200, [ActiveUserResponse.from_orm(user) for user in users]
    except Exception as e:
        logger.error(f"Error listing active users: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))

@router.post("/active-user", response={200: MessageResponse, 400: ErrorResponse})
def create_active_user(request, user: ActiveUserRequest):
    try:
        result = ActiveUser.objects.bulk_create([ActiveUser(**user.dict()) for user in user.users])
        return 200, MessageResponse(message=f"Active user created successfully for {len(result)} users")
    except Exception as e:
        logger.error(f"Error creating active user: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))
    
@router.put("/active-user", response={200: MessageResponse, 400: ErrorResponse})
def update_active_user(request, id: uuid.UUID, user: ActiveUserUpdate):
    try:
        existing_user = ActiveUser.objects.get(id=id)
        for attr, value in user.dict(exclude_unset=True).items():
            setattr(existing_user, attr, value)
        existing_user.save()
        return 200, MessageResponse(message=f"Active user updated successfully for {existing_user.id} users")
    except Exception as e:
        logger.error(f"Error updating active user: {e}", exc_info=True)
        return 400, ErrorResponse(error=str(e))