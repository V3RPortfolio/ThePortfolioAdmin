from django.db import models
from .device import MobileDevice
from enum import Enum

class RootStatus(Enum):
    COMPROMISED = "compromised"
    UNCOMPROMISED = "uncompromised"
    UNKNOWN = "unknown"

class BootloaderStatus(Enum):
    COMPROMISED = "compromised"
    UNCOMPROMISED = "uncompromised"
    UNKNOWN = "unknown"


class SelinuxStatus(Enum):
    ENFORCING = "enforcing"
    PERMISSIVE = "permissive"
    DISABLED = "disabled"
    UNKNOWN = "unknown"

class EncryptionStatus(Enum):
    ENCRYPTED = "encrypted"
    UNENCRYPTED = "unencrypted"
    UNKNOWN = "unknown"


class EnableDeviceStatus(Enum):
    ENABLED = "enabled"
    DISABLED = "disabled"
    UNKNOWN = "unknown"



class DeviceSecurity(models.Model):
    device = models.ForeignKey(MobileDevice, on_delete=models.CASCADE)
    security_score = models.IntegerField(default=0)
    security_score_description = models.TextField(null=True, blank=True)
    security_score_updated_at = models.DateTimeField(auto_now=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    

    root_status = models.CharField(max_length=255, choices=[(status.value, status.value) for status in RootStatus], default=RootStatus.UNKNOWN.value)
    bootloader_status = models.CharField(max_length=255, choices=[(status.value, status.value) for status in BootloaderStatus], default=BootloaderStatus.UNKNOWN.value)
    selinux_status = models.CharField(max_length=255, choices=[(status.value, status.value) for status in SelinuxStatus], default=SelinuxStatus.UNKNOWN.value)
    encryption_status = models.CharField(max_length=255, choices=[(status.value, status.value) for status in EncryptionStatus], default=EncryptionStatus.UNKNOWN.value)
    screen_lock_status = models.CharField(max_length=255, choices=[(status.value, status.value) for status in EnableDeviceStatus], default=EnableDeviceStatus.UNKNOWN.value)
    usb_debug_status = models.CharField(max_length=255, choices=[(status.value, status.value) for status in EnableDeviceStatus], default=EnableDeviceStatus.UNKNOWN.value)
    unknown_sources_status = models.CharField(max_length=255, choices=[(status.value, status.value) for status in EnableDeviceStatus], default=EnableDeviceStatus.UNKNOWN.value)
    developer_options_status = models.CharField(max_length=255, choices=[(status.value, status.value) for status in EnableDeviceStatus], default=EnableDeviceStatus.UNKNOWN.value)

    class Meta:
        ordering = ["-created_at"]
        verbose_name = "Device Security"
        verbose_name_plural = "Device Security"

    def __str__(self):
        return f"{self.device.name} - {self.security_score}"