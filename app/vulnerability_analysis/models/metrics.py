from django.db import models
from enum import Enum
import uuid


class MetricType(Enum):
    APP = "app"
    NETWORK = "network"
    IO = "io"



def generate_uuid():
    return str(uuid.uuid4())

class AppInfo(models.Model):
    id = models.CharField(primary_key=True, default=generate_uuid, editable=False, max_length=50)
    device_name = models.CharField(max_length=255)
    file_path = models.CharField(max_length=255)
    apk_path = models.CharField(max_length=255)
    apk_version = models.CharField(max_length=5)
    package_name = models.CharField(max_length=255)
    package_type = models.CharField(max_length=255)
    app_status = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    

    class Meta:
        ordering = ["-created_at"]
        verbose_name = "App Info"
        verbose_name_plural = "App Infos"
        unique_together = ["device_name", "file_path", "apk_path"]

    def __str__(self) -> str:
        return f"{self.device_name} - {self.apk_path}"



class NetworkConnection(models.Model):
    id = models.CharField(primary_key=True, default=generate_uuid, editable=False, max_length=50)
    device_name = models.CharField(max_length=255)
    protocol = models.CharField(max_length=10)
    version = models.CharField(max_length=10)
    local_address = models.CharField(max_length=50)
    foreign_address = models.CharField(max_length=50, null=True, blank=True)
    process_id = models.CharField(max_length=100)
    program_name = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    connection_status = models.CharField(max_length=50)

    class Meta:
        ordering = ["-created_at"]
        verbose_name = "Network Connection"
        verbose_name_plural = "Network Connections"
        unique_together = ["device_name", "local_address", "foreign_address", "process_id", "program_name", "protocol"]

    def __str__(self) -> str:
        return f"{self.device_name} - {self.local_address} - {self.foreign_address} - {self.program_name}"


class IODevice(models.Model):
    id = models.CharField(primary_key=True, default=generate_uuid, editable=False, max_length=50)
    device_name = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    device_path = models.CharField(max_length=255)
    device_type = models.CharField(max_length=50)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    status = models.CharField(max_length=50, null=True, blank=True)


    class Meta:
        ordering = ["-created_at"]
        verbose_name = "IO Device"
        verbose_name_plural = "IO Devices"

        unique_together = ["device_name", "device_path", "device_type"]

    def __str__(self) -> str:
        return f"{self.device_name} - {self.name} - {self.device_path}"

class ProcessInfo(models.Model):
    id = models.CharField(primary_key=True, default=generate_uuid, editable=False, max_length=50)
    device_name = models.CharField(max_length=255)
    process_id = models.CharField(max_length=100)
    process_name = models.CharField(max_length=255)
    first_timestamp = models.DateTimeField(auto_now_add=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


    class Meta:
        ordering = ["-created_at"]
        verbose_name = "Process Info"
        verbose_name_plural = "Process Infos"
        unique_together = ["device_name", "process_id", "process_name"]

    def __str__(self) -> str:
        return f"{self.device_name} - {self.process_id} - {self.process_name}"



class ProcessHeartbeat(models.Model):
    id = models.CharField(primary_key=True, default=generate_uuid, editable=False, max_length=50)
    device_name = models.CharField(max_length=255)
    process_id = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=50, null=True, blank=True)

    is_connected_to_network = models.BooleanField(default=False)
    is_connected_to_io = models.BooleanField(default=False)
    
    local_network_socket = models.CharField(max_length=50, null=True, blank=True)
    remote_network_socket = models.CharField(max_length=50, null=True, blank=True)
    network_protocol = models.CharField(max_length=50, null=True, blank=True)
    network_connection_status = models.CharField(max_length=50, null=True, blank=True)
    program_name = models.CharField(max_length=255, null=True, blank=True)

    io_path = models.CharField(max_length=255, null=True, blank=True)
    io_comand_name = models.CharField(max_length=255, null=True, blank=True)
    io_user_name = models.CharField(max_length=255, null=True, blank=True)



    class Meta:
        ordering = ["-created_at"]
        verbose_name = "Process Heartbeat"
        verbose_name_plural = "Process Heartbeats"    
        unique_together = ["device_name", "process_id", "created_at"]

    def __str__(self) -> str:
        return f"{self.device_name} - {self.process_id} - {self.created_at}"

class ProcessLog(models.Model):
    id = models.CharField(primary_key=True, default=generate_uuid, editable=False, max_length=50)
    device_name = models.CharField(max_length=255)
    process_id = models.CharField(max_length=100)
    message = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    metric_type = models.CharField(max_length=50, choices=[(metric_type.value, metric_type.value) for metric_type in MetricType])
    log_timestamp = models.CharField(max_length=50, null=True, blank=True)


    class Meta:
        ordering = ["-created_at"]
        verbose_name = "Process Log"
        verbose_name_plural = "Process Logs"
        unique_together = ["device_name", "process_id", "metric_type", "log_timestamp"]

    

    def __str__(self) -> str:
        return f"{self.device_name} - {self.process_id} - {self.metric_type} - {self.log_timestamp}"
    
 


class ActiveUser(models.Model):
    id = models.CharField(primary_key=True, default=generate_uuid, editable=False, max_length=50)
    device_name = models.CharField(max_length=255)
    user_name = models.CharField(max_length=255)
    user_id = models.CharField(max_length=255)
    user_type = models.CharField(max_length=50)
    login_type = models.CharField(max_length=50)
    logged_in_at = models.DateTimeField(auto_now_add=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["-created_at"]
        verbose_name = "Active User"
        verbose_name_plural = "Active Users"
        unique_together = ["device_name", "user_name", "user_id"]

    def __str__(self) -> str:
        return f"{self.device_name} - {self.user_name} - {self.user_id}"
